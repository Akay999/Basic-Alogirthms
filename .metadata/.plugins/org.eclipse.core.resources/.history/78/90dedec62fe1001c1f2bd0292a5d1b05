package DynamicProgrammingAlgo;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
import java.util.HashMap;

public class DynamicProgrammingAlgo {
	static class FastReader {
        BufferedReader br;
        StringTokenizer st;
 
        public FastReader()
        {
            br = new BufferedReader(
                new InputStreamReader(System.in));
        }
 
        String next()
        {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                }
                catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }
 
        int nextInt() { return Integer.parseInt(next()); }
 
        long nextLong() { return Long.parseLong(next()); }
 
        double nextDouble()
        {
            return Double.parseDouble(next());
        }
 
        String nextLine()
        {
            String str = "";
            try {
                str = br.readLine();
            }
            catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }


	public static void main(String[] args) throws IOException{

		FastReader Scanner = new FastReader();

		// FOR GETTING THE TEST CASES
		// int testCases = Scanner.nextInt();

		// while(testCases-- > 0){
		// 	//solve();
		// }
		
		System.out.println("Enter number of elements in the array : ");
		int n = Scanner.nextInt();
		System.out.println("Enter " + n + " elements");
		int[] arr = new int[n];
		for(int i = 0; i < n; i++) {
			arr[i] = Scanner.nextInt();
		}
		System.out.println("Enter the target Sum  : ");
		int targetSum = Scanner.nextInt();
		
//		int[][] dp = new int[n + 1][targetSum + 1];
		HashMap<Integer, Integer> map = new HashMap<>();
		System.out.println("Your Answer is : " + funcWithoutMemoize(arr, targetSum, n - 1));
		
	
	}
	
	private static boolean funcWithoutMemoize(int[] arr, int tg, int index) {
		if(index < 0 && tg != 0) return false;
		if(tg == 0) return true;
		if(arr[index] > tg) return funcWithoutMemoize(arr, tg, index - 1);
		else return (funcWithoutMemoize( arr, tg, index - 1 ) || funcWithoutMemoize(arr, tg - arr[index], index - 1) );
	}
	
	private static boolean funcWithMemoize(int[] arr, int tg, int index) {
		if(index < 0 && tg != 0) return false;
		if(tg == 0) return true;
		if(arr[index] > tg) return funcWithMemoize(arr, tg, index - 1);
		else return (funcWithMemoize( arr, tg, index - 1 ) || funcWithMemoize(arr, tg - arr[index], index - 1) );
	}

	private static void PrintArr(int[] array){
		for(int i : array){
			System.out.print(i + " ");
		}
		System.out.println();
	}
}